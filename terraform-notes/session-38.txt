
																		Session - 38
																	-====================-
																	
																	
																	
		

--> instance create cheyadam --> ansible to instance ni configure cheyadam --> instace stop --> take ami --> instance delete --> target group create cheyadam --> launch template create cheydam --> auto scaling group ni trigger cheyadam

resource "aws_instance" "backend" {
  ami                    = "ami-09c813fb71547fc4f" # This is our devops-practice AMI ID
  vpc_security_group_ids = [data.aws_ssm_parameter.backend_sg_id.value]
  instance_type          = "t3.micro"
  subnet_id = local.private_subnet_id
  tags = merge(
    var.common_tags,
    {
        Name = local.resource_name
    }
  )
}

--> here above code latest ami should be taken always by terraform  when terraform apply
	means org lo central team vuntundhi vaallu every time ami's ni update chestuntaaru apudu manam ikkada backend setup chesinapudu terraform apply koditey adhi latest ami ni pick chestundhi central team vaallu every time ami ni update chestuntaaru security patches etc 
																	
																	
Organisation wide AWS Central team
golden AMI
terraform apply -auto-approve

frontend setup through terraform :
--------------------------------------

--> same setup like as backend setup 

--> web-alb request no frontend servers ki rote chestey aa front end servers request ni app-alb ki route chetaayi aa app-alb request no port 8080 ki server ki pampistundhi


app_alb should accept traffic from frontend servers on port 80
80
--> frontend server send request to App alb (port 80) here app alb accept the request rom front end server (sg_id)
frontend should accept traffic from web_alb on port no 80 here front end servers accept the request from web alb on port 80( web alb sg_id)

expense-dev.daws82s.online
expense-qa.daws82s.online
daws82s.online


--> autoscaling group policy creation through terraform  :
-----------------------------------------------------------



Cloudfront --> Caching

Netflix --> Squid game

1st user --> checks cache --> brings from origin servers --> save to cache --> send to user
2nd user --> checks cache --> send to user


--> rolling update antey oka request vochinapudu user nunchi old version new version rendu up lo vuntaayi apudu manam downtime teesukovaali vm's lo ayitey even container lo ayina few seconds downtime vuntundhi idhi vm's varaku alaaga vuntundhi future lo kubernetes lo blue-green deployment replace chestundhi but ee concept only vm's varaku down time teesukovaali